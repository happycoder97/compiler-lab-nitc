/* vim: set ft=cpp: */
type bst{
    int a;
    bst left;
    bst right;
}

class bstclass{
    bst root;

    int init() {
        self.root = null;
        return 1;
    }

    bst getroot() {
        return self.root;
    }

    int setroot(bst n1) {
        self.root = n1;
        return 1;
    }

    bst getnode(int key) {
        bst temp;
        temp = alloc();
        temp.a = key;
        temp.left = null;
        temp.right = null;
        return temp;
    }

    bst insert(bst h, int key) {
        if (h == null) {
            h = self.getnode(key);
        } else {
            if (key < h.a) {
                h.left = self.insert(h.left, key);
            } else {
                if (key > h.a) {
                    h.right = self.insert(h.right, key);
                }
            }
        }
        return h;
    }

    int inOrder_fun(bst h) {
        int in;
        if (h != null) {
            in = self.inOrder_fun(h.left);
            write(h.a);
            in = self.inOrder_fun(h.right);
        }
        return 1;
    }

    int preOrder_fun(bst h) {
        int in;
        if (h != null) {
            write(h.a);
            in = self.preOrder_fun(h.left);
            in = self.preOrder_fun(h.right);
        }
        return 1;
    }

    int postOrder_fun(bst h) {
        int in;
        if (h != null) {
            in = self.postOrder_fun(h.left);
            in = self.postOrder_fun(h.right);
            write(h.a);
        }
        return 1;
    }
}

bstclass obj;

int main() {

    bst Root;
    int x,in,val;

    initialize();

    obj = new(bstclass);
    obj.init();
    read(val);
    Root = obj.getroot();
    while (val != 0) do
        Root = obj.insert(Root,val);
        read(val);
    endwhile;
    obj.setroot(Root);
    obj.inOrder_fun(obj.getroot());
    obj.preOrder_fun(obj.getroot());
    obj.postOrder_fun(obj.getroot());
    return 0;
}
